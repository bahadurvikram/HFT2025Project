plot(ended_date, viewers)
ended_date=c('2006-05-15','2007-04-02','2008-02-18','2009-05-15','2017-05-30')
ended_date = c(as.Date(ended_date, "%Y-/%m-/%d"))
ended_date=c(as.Date('2006-05-15'),as.Date('2007-04-02'),as.Date('2008-02-18'),as.Date('2009-05-15'),as.Date('2017-05-30'))
viewers = c(10.51,9.37,7.51,6.53,3.83)
print(length(ended_date))
plot(ended_date, viewers)
plot(ended_date, viewers, "l")
viewers = c(10.51,9.37,7.51,6.53,3.83)
print(length(ended_date))
plot(ended_date, viewers, "l")
ylab("viewers (millions")
ylab("viewers (millions")
plot(ended_date, viewers, "l")
ended_date=c(as.Date('2006-05-15'),as.Date('2007-04-02'),as.Date('2008-02-18'),as.Date('2009-05-15'),as.Date('2017-05-30'))
viewers = c(10.51,9.37,7.51,6.53,3.83)
print(length(ended_date))
ylab("viewers (millions")
plot(ended_date, viewers, "l", main="Viewers per season", xlab = "Viewers (in millions", ylab = "Season End Date")
plot(ended_date, viewers, "l", main="Viewers Per Season", ylab = "Viewers (in millions)", xlab = "Season End Date")
ended_date=c(as.Date('2006-05-15'),as.Date('2007-04-02'),as.Date('2008-02-18'),as.Date('2009-05-15'),as.Date('2017-05-30'))
viewers = c(10.51,9.37,7.51,6.53,3.83)
plot(ended_date, viewers, "l", main="Viewers Per Season", ylab = "Viewers (in millions)", xlab = "Season End Date")
plot(ended_date, viewers, "l", main="Viewers Per Season", ylab = "Viewers (in millions)", xlab = "Season End Date", pch=18)
viewers = c(10.51,9.37,7.51,6.53,3.83)
plot(ended_date, viewers, "l", main="Viewers Per Season", ylab = "Viewers (in millions)", xlab = "Season End Date", pch=18)
plot(ended_date, viewers, "l", main="Viewers Per Season", ylab = "Viewers (in millions)", xlab = "Season End Date", pch=18, col="blue")
text(ended_date, viewers, cex=0.6, pos=4, col="red")
plot(ended_date, viewers, "l", main="Viewers Per Season", ylab = "Viewers (in millions)", xlab = "Season End Date", pch=18, col="blue")
text(ended_date, viewers, cex=0.6, pos=4, col="red")
ended_date=c(as.Date('2006-05-15'),as.Date('2007-04-02'),as.Date('2008-02-18'),as.Date('2009-05-15'),as.Date('2017-05-30'))
viewers = c(10.51,9.37,7.51,6.53,3.83)
ratings = c(55,51,73,68,115)
seasons = c(1,2,3,4,5)
plot(seasons, ratings, "h", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "l", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, ratings, cex=0.6, pos=4, col="red")
earthquakes.dat <- read.delim("/Users/vikrambahadur/Downloads/earthquakes.txt")
View(earthquakes.dat)
View(earthquakes.dat)
y.dat=earthquakes.dat$Quakes[1:100]
y.new=earthquakes.dat$Quakes[101:103]
covid.dat <- read.delim("/Users/vikrambahadur/Downloads/GoogleSearchIndex.txt")
covid.dat$Week=as.Date(covid.dat$Week,format = '%Y-%m-%d')
library(readr)
library(sfdep)
require(sp)
install.packages("sp")
require(spdep)
install.packages("sfdep")
install.packages("spdep")
install.packages("spdep")
install.packages("readr")
install.packages("ggplot2")
install.packages("ggthemes")
library(sf)
data_municipalities <- read_csv("../data/data_municipalities.csv")
library(sf)
library(sfdep)
library(sp)
library(spdep)
library(readr)
library(ggplot2)
library(ggthemes)
data_municipalities <- read_csv("../data/data_municipalities.csv")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(sf)
library(sfdep)
library(sp)
library(spdep)
library(readr)
library(ggplot2)
library(ggthemes)
data_municipalities <- read_csv("../data/data_municipalities.csv")
data_municipalities <- read_csv("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/data_municipalities.csv")
map_municipalities <- st_read("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/shapefile/map_municipalities.shp")
map_municipalities <- st_read("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/shapefile/map_municipalities.shp")
plot(st_geometry(map_municipalities))
which(!map_municipalities$mncplty_c %in% data_municipalities$municipality_code)
which(!data_municipalities$municipality_code %in% map_municipalities$mncplty_c )
map_municipalities_with_data <-
map_municipalities %>%
left_join(data_municipalities,
by = join_by(mncplty_c == municipality_code))
ggplot(map_municipalities_with_data,
aes(fill = percent_vaccinated)) +
geom_sf() +
ggthemes::theme_map() +
scale_fill_continuous()
map_partitions <- st_read("../_data/shapefile/map_partitions.shp")
map_partitions <- st_read("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/shapefile/map_partitions.shp")
ggplot() +
geom_sf(data = map_partitions,
aes(fill = partition)) +
ggthemes::theme_map()
ggplot() +
geom_sf(data = map_municipalities_with_data,
aes(fill = percent_vaccinated)) +
ggthemes::theme_map() +
scale_fill_continuous() +
geom_sf(data = map_partitions,
size = 2,
color = "red",
fill = NA)
#---------------------------------------------------------------
# creating spatial weight matrix - contiguity (i.e. common border)
municipalities_neighbours <- sfdep::st_contiguity(map_municipalities)
# lets check its structure
glimpse(municipalities_neighbours)
# converting a list of neighbours into a matrix
spatial_weights <- nb2mat(municipalities_neighbours)
# you can check if it is row standardized by default
summary(rowSums(spatial_weights))
map_municipalities_with_data$splag_percent_vaccinated <-
spatial_weights %*% as.matrix(map_municipalities_with_data$percent_vaccinated)
View(map_partitions)
ggplot() +
geom_sf(data = map_partitions,
aes(fill = partition)) +
ggthemes::theme_map()
load("../Data/got/season_1.RData")
View(season_data)
######### Testing only
df <- data.frame(
Index = c("A", "B", "C", "D"),
Value1 = c(10, 20, 30, 40),
Value2 = c(5, 15, 25, 35),
Value3 = c(7, 17, 27, 37)
)
library(tidyr)
library(dplyr)
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = starts_with("Value"), names_to = "Variable", values_to = "Value")
library(ggplot2)
# Create the plot
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
ggplot(df, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
# Create the plot
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
## here in inversre way
# Convert Index to row names
df_t <- df %>%
column_to_rownames(var = "Index") %>%
t() %>%
as.data.frame()
## here in inversre way
# Convert Index to row names
df_long <- df %>%
pivot_longer(cols = -Category, names_to = "Variable", values_to = "Value")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = -Category, names_to = "Variable", values_to = "Value")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = -Index, names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(x = Index, y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot with Category as Columns", x = "Category", y = "Values") +
theme_minimal()
View(df_long)
######### Testing only
df <- data.frame(
Index = c("y4_vecm", "y8_vecm", "y4_arima", "y8_arima"),
MAE = c(10, 20, 30, 40),
MSE = c(5, 15, 25, 35),
MAPE = c(7, 17, 27, 37)
)
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = starts_with("Value"), names_to = "Variable", values_to = "Value")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = starts_with("M"), names_to = "Variable", values_to = "Value")
View(df_long)
# Create the plot
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot with Category as Columns", x = "Category", y = "Values") +
theme_minimal()
######### Testing only
df <- data.frame(
MAE = c(10, 20, 30, 40),
MSE = c(5, 15, 25, 35),
MAPE = c(7, 17, 27, 37)
)
View(df)
rownames(df) <- c("Index1", "Index2", "Index3", "Index4")
View(df)
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = starts_with("I"), names_to = "Variable", values_to = "Value")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = starts_with("M"), names_to = "Variable", values_to = "Value")
View(df_long)
# Create the plot
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
# Create the plot
ggplot(df_long, aes(x = index(df), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
index(df)
df
df$index
name(df)
names(df)
rownames(df)
# Create the plot
ggplot(df_long, aes(x = rownames(df), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
# Create the plot
ggplot(df_long, aes(x = rownames(df), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
View(df_long)
# Create the plot
ggplot(df_long, aes(x = c(rownames(df)), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
# Create the plot
ggplot(df_long, aes(x = list(rownames(df)), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
# Create the plot
ggplot(df_long, aes(x = factor(rownames(df)), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
# Create the plot
ggplot(df_long, aes(x = factor(row.names(df)), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
row.names(df)
# Create the plot
plot(df)
# Create the plot
plot(df_long)
ggplot(df_long, aes(x = c("Index1", "Index2", "Index3", "Index4"), y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
View(df_long)
######### Testing only
df <- data.frame(
MAE = c(0.9862111, 1.9383977, 0.7744276, 1.5054579),
MSE = c(1.3990977, 5.2300808, 0.7865475, 2.7980167),
MAPE = c(7, 17, 27, 37),
AMAPE = c(7, 17, 27, 37)
)
rownames(df) <- c("Index1", "Index2", "Index3", "Index4")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = c("MAE", "MSE", "MAPE", "AMPE"), names_to = "Variable", values_to = "Value")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = c("MAE", "MSE", "MAPE", "AMAPE"), names_to = "Variable", values_to = "Value")
View(df_long)
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
######### Testing only
df <- data.frame(
MAE = c(0.9862111, 1.9383977, 0.7744276, 1.5054579),
MSE = c(1.3990977, 5.2300808, 0.7865475, 2.7980167),
MAPE = c(7, 17, 27, 37),
AMAPE = c(7, 17, 27, 37)
)
rownames(df) <- c("Index1", "Index2", "Index3", "Index4")
df$Index <- rownames(df)
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = c("MAE", "MSE", "MAPE", "AMAPE"), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
colnames(df)
######### Testing only
df <- data.frame(
MAE = c(0.9862111, 1.9383977, 0.7744276, 1.5054579),
MSE = c(1.3990977, 5.2300808, 0.7865475, 2.7980167),
MAPE = c(7, 17, 27, 37),
AMAPE = c(7, 17, 27, 37)
)
rownames(df) <- c("Index1", "Index2", "Index3", "Index4")
df$Index <- rownames(df)
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = colnames(df), names_to = "Variable", values_to = "Value")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = factor(colnames(df)), names_to = "Variable", values_to = "Value")
# Reshape data to long format
df_long <- df %>%
pivot_longer(cols = factor(colnames(df)), names_to = "Variable", values_to = "Value")
clean
clean()
clear()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
coord_cartesian(ylim = c(0, 5)) +  # Zoom in on y-axis range
theme_minimal()
25
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
coord_cartesian(ylim = c(0, 25)) +  # Zoom in on y-axis range
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
scale_y_continuous(
breaks = c(0, 5, 10, 15, 20, 25, 30),  # Custom breaks for y-axis
limits = c(0, 25)   # Limits to zoom in
) +
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
scale_y_continuous(
breaks = c(0, 5, 10),  # Custom breaks for y-axis
limits = c(0, 25)   # Limits to zoom in
) +
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
scale_y_continuous(
#breaks = c(0, 5, 10),  # Custom breaks for y-axis
limits = c(0, 25)   # Limits to zoom in
) +
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
coord_cartesian(ylim = c(0, 20)) +  # Zoom in on y-axis range
+
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
coord_cartesian(ylim = c(0, 20)) +  # Zoom in on y-axis range
theme_minimal()
ggplot(df_long, aes(x = Index, y = Value, color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
ggplot(df_long, aes(x = Value, y =Index , color = Variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Multi-Column Plot", x = "Index", y = "Values") +
theme_minimal()
# Display grid
grid()
# Add legend
legend("topright", legend = c(paste("Savings Rate =", s_initial), paste("Savings Rate =", s_new)),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# Add legend
legend("topright", legend = c(paste("Savings Rate =", s_initial), paste("Savings Rate =", s_new)),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# Define parameters
s_initial <- 0.2  # initial saving rate
s_new <- 0.3  # increased saving rate
n <- 0.01  # population growth rate
delta <- 0.05  # depreciation rate
alpha <- 0.3  # output elasticity of capital
rho <- 0.5  # CES parameter
# Define the steady-state capital function
steady_state_k <- function(s, n, delta, alpha, rho) {
A <- s / (n + delta)
B <- (alpha / (1 - alpha))^(1 / rho)
return((A * B)^(1 / (1 - alpha)))
}
# Calculate steady-state capital per worker for different savings rates
k_vals <- seq(0, 100, length.out = 500)  # a range of values for capital per worker
# Calculate steady-state capital for initial and new savings rates
steady_state_initial <- steady_state_k(s_initial, n, delta, alpha, rho)
steady_state_new <- steady_state_k(s_new, n, delta, alpha, rho)
# Plotting the effect of change in savings rate on steady-state capital per worker
plot(k_vals, steady_state_initial * k_vals, type = "l", col = "blue", lwd = 2,
xlab = "Capital per Worker (k)", ylab = "Steady-State Capital per Worker",
main = "Effect of Increase in Savings Rate on Steady-State Capital per Worker")
lines(k_vals, steady_state_new * k_vals, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topright", legend = c(paste("Savings Rate =", s_initial), paste("Savings Rate =", s_new)),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# Display grid
grid()
# Define parameters
s_initial <- 0.2  # initial saving rate
s_new <- 0.3  # increased saving rate
n <- 0.01  # population growth rate
delta <- 0.05  # depreciation rate
alpha <- 0.3  # output elasticity of capital
rho <- 0.5  # CES parameter
# Define the steady-state capital function
steady_state_k <- function(s, n, delta, alpha, rho) {
A <- s / (n + delta)
B <- (alpha / (1 - alpha))^(1 / rho)
return((A * B)^(1 / (1 - alpha)))
}
# Create an array of k values (capital per worker)
k_vals <- seq(0, 100, length.out = 500)
# Calculate steady-state values for both savings rates
k_star_initial <- steady_state_k(s_initial, n, delta, alpha, rho)
k_star_new <- steady_state_k(s_new, n, delta, alpha, rho)
# Plotting the graph
plot(k_vals, steady_state_k(s_initial, n, delta, alpha, rho),
type = "l", col = "blue", lwd = 2,
xlab = "Capital per Worker (k)", ylab = "Steady-State Capital per Worker",
main = "Effect of Increase in Savings Rate on Steady-State Capital per Worker")
lines(k_vals, steady_state_k(s_new, n, delta, alpha, rho), col = "red", lwd = 2, lty = 2)
# Add legend
legend("topright", legend = c(paste("Savings Rate =", s_initial), paste("Savings Rate =", s_new)),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# Define parameters
s <- 0.2  # savings rate
n_initial <- 0.01  # initial population growth rate
n_new <- 0.05  # increased population growth rate
delta <- 0.05  # depreciation rate
alpha <- 0.3  # output elasticity of capital
rho <- 0.5  # CES parameter
# Define the steady-state capital function
steady_state_k <- function(s, n, delta, alpha, rho) {
A <- s / (n + delta)
B <- (alpha / (1 - alpha))^(1 / rho)
return((A * B)^(1 / (1 - alpha)))
}
# Calculate steady-state capital per worker for different population growth rates
k_vals <- seq(0, 100, length.out = 500)  # a range of values for capital per worker
# Calculate steady-state capital for initial and new population growth rates
steady_state_initial_n <- steady_state_k(s, n_initial, delta, alpha, rho)
steady_state_new_n <- steady_state_k(s, n_new, delta, alpha, rho)
# Plotting the effect of change in population growth rate on steady-state capital per worker
plot(k_vals, steady_state_initial_n * k_vals, type = "l", col = "blue", lwd = 2,
xlab = "Capital per Worker (k)", ylab = "Steady-State Capital per Worker",
main = "Effect of Increase in Population Growth Rate on Steady-State Capital per Worker")
lines(k_vals, steady_state_new_n * k_vals, col = "red", lwd = 2, lty = 2)
# Add legend
legend("topright", legend = c(paste("Population Growth Rate =", n_initial), paste("Population Growth Rate =", n_new)),
col = c("blue", "red"), lty = c(1, 2), lwd = 2)
# Display grid
grid()
#
rm(list = ls())
rm()
rm(list=ls())
## Get present location
LOC_CODE = dirname(rstudioapi::getSourceEditorContext()$path)
print(LOC_CODE)
## Set it as current working directory
setwd(LOC_CODE)
###############################################
# Install dependent source code
###############################################
source("https://raw.githubusercontent.com/ptwojcik/HFD/master/functions_plotHeatmap.R")
source("functions/load_and_pre_process.R")
source("functions/define_entry_exit.R")
source("functions/execute_strategies.R")
source("functions/define_daily_filters.R")
source("functions/execute_one_at_a_time.R")
pwd
quarto render presentation_hft_2025.qmd --to pptx
quarto render presentation_hft_2025.qmd --to pptx
quarto render presentation_hft_2025.qmd
quarto render presentation_hft_2025.qmd --to pdf
quarto render
## Get present location
LOC_CODE = dirname(rstudioapi::getSourceEditorContext()$path)
print(LOC_CODE)
## Set it as current working directory
setwd(LOC_CODE)
quarto render
